// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using quizlyApi.Data;

#nullable disable

namespace quizlyApi.Migrations
{
    [DbContext(typeof(QuizlyDbContext))]
    partial class QuizlyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("quizlyApi.Models.QuizConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("context");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int")
                        .HasColumnName("difficulty");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.ToTable("quiz_config");
                });

            modelBuilder.Entity("quizlyApi.Models.QuizContent", b =>
                {
                    b.Property<int>("QuizId")
                        .HasColumnType("int")
                        .HasColumnName("quizId");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    b.Property<int>("Language")
                        .HasColumnType("int")
                        .HasColumnName("lang");

                    b.Property<string>("PostProcessedContent")
                        .HasColumnType("longtext")
                        .HasColumnName("postProcessedContent");

                    b.Property<string>("RawContent")
                        .HasColumnType("longtext")
                        .HasColumnName("rawContent");

                    b.HasKey("QuizId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("quiz_content");
                });

            modelBuilder.Entity("quizlyApi.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.ToTable("user");
                });

            modelBuilder.Entity("quizlyApi.Models.QuizContent", b =>
                {
                    b.HasOne("quizlyApi.Models.QuizConfig", "QuizConfig")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("quizlyApi.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizConfig");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
